// APIs.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import os

// We reverted the change of OpenpathAPI to Openpath introduced in
// https://github.com/OpenAPITools/openapi-generator/pull/9624
// Because it was causing the following issue https://github.com/OpenAPITools/openapi-generator/issues/9953
// If you are affected by this issue, please consider removing the following two lines,
// By setting the option removeMigrationProjectNameClass to true in the generator
@available(*, deprecated, renamed: "OpenpathAPI")
public typealias Openpath = OpenpathAPI

open class OpenpathAPI {
    public static var basePath = ProcessInfo.processInfo.environment["API_URL"] ?? "https://api.openpath.com"
    public static var customHeaders: [String: String] = [:]
    public static var credential: URLCredential?
    public static var requestBuilderFactory: RequestBuilderFactory = URLSessionRequestBuilderFactory()
    public static var apiResponseQueue: DispatchQueue = .main
}

@available(iOS 14, *)
private let apiLog = Logger(subsystem: "Openpath API", category: "Network")

open class RequestBuilder<T> {
    var credential: URLCredential?
    var headers: [String: String]
    public let parameters: [String: Any]?
    public let method: String
    public let URLString: String
    public let requestTask: RequestTask = .init()

    /// Optional block to obtain a reference to the request's progress instance when available.
    /// With the URLSession http client the request's progress only works on iOS 11.0, macOS 10.13, macCatalyst 13.0,
    /// tvOS 11.0, watchOS 4.0.
    /// If you need to get the request's progress in older OS versions, please use Alamofire http client.
    public var onProgressReady: ((Progress) -> Void)?

    public required init(
        method: String,
        URLString: String,
        parameters: [String: Any]?,
        headers: [String: String] = [:]
    ) {
        self.method = method
        self.URLString = URLString
        self.parameters = parameters
        self.headers = headers

        addHeaders(OpenpathAPI.customHeaders)
    }

    open func addHeaders(_ aHeaders: [String: String]) {
        for (header, value) in aHeaders {
            headers[header] = value
        }
    }

    @discardableResult
    open func execute(
        _: DispatchQueue = OpenpathAPI.apiResponseQueue,
        _: @escaping (_ result: Swift.Result<Response<T>, ErrorResponse>) -> Void
    ) -> RequestTask {
        #if DEBUG
        if #available(iOS 14.0, *) {
            var components = ["$ curl -v"]
            if method.caseInsensitiveCompare("GET") != .orderedSame {
                components.append("-X \(method.uppercased())")
            }
            components.append(contentsOf: headers.map { key, value in
                "-H '\(key): \(value)'"
            })

            apiLog.debug("\(components.joined(separator: " \n\t"), privacy: .private)")
        }
        #endif

        return requestTask
    }

    public func addHeader(name: String, value: String) -> Self {
        if !value.isEmpty {
            headers[name] = value
        }
        return self
    }

    open func addCredential() -> Self {
        credential = OpenpathAPI.credential
        return self
    }
}

public protocol RequestBuilderFactory {
    func getNonDecodableBuilder<T>() -> RequestBuilder<T>.Type
    func getBuilder<T: Decodable>() -> RequestBuilder<T>.Type
}
