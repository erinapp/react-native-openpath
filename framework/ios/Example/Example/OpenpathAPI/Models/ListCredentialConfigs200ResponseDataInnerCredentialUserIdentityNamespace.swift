//
// ListCredentialConfigs200ResponseDataInnerCredentialUserIdentityNamespace.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ListCredentialConfigs200ResponseDataInnerCredentialUserIdentityNamespace: Codable, JSONEncodable,
    Hashable {
    public var id: Int?
    public var nickname: String?
    public var namespaceType: ListCredentialConfigs200ResponseDataInnerCredentialCredentialType?
    public var org: ListCredentialConfigs200ResponseDataInnerOrg?
    public var identityProvider: ListCredentialConfigs200ResponseDataInnerCredentialUserIdentityNamespaceIdentityProvider?

    public init(
        id: Int? = nil,
        nickname: String? = nil,
        namespaceType: ListCredentialConfigs200ResponseDataInnerCredentialCredentialType? = nil,
        org: ListCredentialConfigs200ResponseDataInnerOrg? = nil,
        identityProvider: ListCredentialConfigs200ResponseDataInnerCredentialUserIdentityNamespaceIdentityProvider? =
            nil
    ) {
        self.id = id
        self.nickname = nickname
        self.namespaceType = namespaceType
        self.org = org
        self.identityProvider = identityProvider
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case nickname
        case namespaceType
        case org
        case identityProvider
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(nickname, forKey: .nickname)
        try container.encodeIfPresent(namespaceType, forKey: .namespaceType)
        try container.encodeIfPresent(org, forKey: .org)
        try container.encodeIfPresent(identityProvider, forKey: .identityProvider)
    }
}
