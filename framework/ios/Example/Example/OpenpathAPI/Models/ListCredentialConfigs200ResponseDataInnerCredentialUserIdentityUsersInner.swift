//
// ListCredentialConfigs200ResponseDataInnerCredentialUserIdentityUsersInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ListCredentialConfigs200ResponseDataInnerCredentialUserIdentityUsersInner: Codable, JSONEncodable,
    Hashable {
    public var id: Double?
    public var opal: String?
    public var status: String?
    public var startDate: Date?
    public var endDate: Date?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var org: ListCredentialConfigs200ResponseDataInnerOrg?

    public init(
        id: Double? = nil,
        opal: String? = nil,
        status: String? = nil,
        startDate: Date? = nil,
        endDate: Date? = nil,
        createdAt: Date? = nil,
        updatedAt: Date? = nil,
        org: ListCredentialConfigs200ResponseDataInnerOrg? = nil
    ) {
        self.id = id
        self.opal = opal
        self.status = status
        self.startDate = startDate
        self.endDate = endDate
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.org = org
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case opal
        case status
        case startDate
        case endDate
        case createdAt
        case updatedAt
        case org
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(opal, forKey: .opal)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(org, forKey: .org)
    }
}
