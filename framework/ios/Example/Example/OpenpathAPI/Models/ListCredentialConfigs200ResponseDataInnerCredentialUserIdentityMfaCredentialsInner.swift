//
// ListCredentialConfigs200ResponseDataInnerCredentialUserIdentityMfaCredentialsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ListCredentialConfigs200ResponseDataInnerCredentialUserIdentityMfaCredentialsInner: Codable,
    JSONEncodable,
    Hashable {
    public var id: Double?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var name: String?
    public var status: String?
    public var mfaCredentialType: ListCredentialConfigs200ResponseDataInnerCredentialCredentialType?
    public var totpSoftDevice: ListCredentialConfigs200ResponseDataInnerCredentialUserIdentityMfaCredentialsInnerTotpSoftDevice?

    public init(
        id: Double? = nil,
        createdAt: Date? = nil,
        updatedAt: Date? = nil,
        name: String? = nil,
        status: String? = nil,
        mfaCredentialType: ListCredentialConfigs200ResponseDataInnerCredentialCredentialType? = nil,
        totpSoftDevice: ListCredentialConfigs200ResponseDataInnerCredentialUserIdentityMfaCredentialsInnerTotpSoftDevice? =
            nil
    ) {
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.name = name
        self.status = status
        self.mfaCredentialType = mfaCredentialType
        self.totpSoftDevice = totpSoftDevice
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdAt
        case updatedAt
        case name
        case status
        case mfaCredentialType
        case totpSoftDevice
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(mfaCredentialType, forKey: .mfaCredentialType)
        try container.encodeIfPresent(totpSoftDevice, forKey: .totpSoftDevice)
    }
}
