//
// ListCredentialConfigs200ResponseDataInnerCredentialCardFields.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ListCredentialConfigs200ResponseDataInnerCredentialCardFields: Codable, JSONEncodable, Hashable {
    public var rcm: String?
    public var facilityCode: String?
    public var issueLevel: String?
    public var cardId: String?
    public var companyId: String?
    public var companyCode: String?
    public var siteCode: String?
    public var oem: String?

    public init(
        rcm: String? = nil,
        facilityCode: String? = nil,
        issueLevel: String? = nil,
        cardId: String? = nil,
        companyId: String? = nil,
        companyCode: String? = nil,
        siteCode: String? = nil,
        oem: String? = nil
    ) {
        self.rcm = rcm
        self.facilityCode = facilityCode
        self.issueLevel = issueLevel
        self.cardId = cardId
        self.companyId = companyId
        self.companyCode = companyCode
        self.siteCode = siteCode
        self.oem = oem
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case rcm
        case facilityCode
        case issueLevel
        case cardId
        case companyId
        case companyCode
        case siteCode
        case oem
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(rcm, forKey: .rcm)
        try container.encodeIfPresent(facilityCode, forKey: .facilityCode)
        try container.encodeIfPresent(issueLevel, forKey: .issueLevel)
        try container.encodeIfPresent(cardId, forKey: .cardId)
        try container.encodeIfPresent(companyId, forKey: .companyId)
        try container.encodeIfPresent(companyCode, forKey: .companyCode)
        try container.encodeIfPresent(siteCode, forKey: .siteCode)
        try container.encodeIfPresent(oem, forKey: .oem)
    }
}
