//
// ListCredentialConfigs200ResponseDataInnerCredentialMobile.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ListCredentialConfigs200ResponseDataInnerCredentialMobile: Codable, JSONEncodable, Hashable {
    public var id: Double?
    public var name: String?
    public var provisionedAt: Date?
    public var httpUserAgent: String?
    public var version: String?
    public var build: Double?
    public var os: String?
    public var hasSetupMobileToken: Bool?
    public var userIotCert: ListCredentialConfigs200ResponseDataInnerCredentialMobileUserIotCert?

    public init(
        id: Double? = nil,
        name: String? = nil,
        provisionedAt: Date? = nil,
        httpUserAgent: String? = nil,
        version: String? = nil,
        build: Double? = nil,
        os: String? = nil,
        hasSetupMobileToken: Bool? = nil,
        userIotCert: ListCredentialConfigs200ResponseDataInnerCredentialMobileUserIotCert? = nil
    ) {
        self.id = id
        self.name = name
        self.provisionedAt = provisionedAt
        self.httpUserAgent = httpUserAgent
        self.version = version
        self.build = build
        self.os = os
        self.hasSetupMobileToken = hasSetupMobileToken
        self.userIotCert = userIotCert
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case provisionedAt
        case httpUserAgent
        case version
        case build
        case os
        case hasSetupMobileToken
        case userIotCert
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(provisionedAt, forKey: .provisionedAt)
        try container.encodeIfPresent(httpUserAgent, forKey: .httpUserAgent)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(build, forKey: .build)
        try container.encodeIfPresent(os, forKey: .os)
        try container.encodeIfPresent(hasSetupMobileToken, forKey: .hasSetupMobileToken)
        try container.encodeIfPresent(userIotCert, forKey: .userIotCert)
    }
}
