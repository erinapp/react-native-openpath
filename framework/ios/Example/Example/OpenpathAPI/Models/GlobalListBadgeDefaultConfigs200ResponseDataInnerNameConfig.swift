//
// GlobalListBadgeDefaultConfigs200ResponseDataInnerNameConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GlobalListBadgeDefaultConfigs200ResponseDataInnerNameConfig: Codable, JSONEncodable, Hashable {
    public enum FontStyle: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case italic
        case oblique
        case _none = "none"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }

    public enum TextAlign: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case _left = "left"
        case center
        case _right = "right"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }

    public enum Layout: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case threelines = "threeLines"
        case twolines = "twoLines"
        case oneline = "oneLine"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }

    public enum TextTransform: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case _none = "none"
        case uppercase
        case lowercase
        case capitalize
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }

    public var isEnabled: Bool?
    public var color: String?
    public var fontFamily: String?
    public var fontSize: Double?
    public var lineHeight: Double?
    public var fontWeight: Double?
    public var fontStyle: FontStyle?
    public var textAlign: TextAlign?
    public var centerX: Double?
    public var centerY: Double?
    public var width: Double?
    public var height: Double?
    public var layout: Layout?
    public var textTransform: TextTransform?

    public init(
        isEnabled: Bool? = nil,
        color: String? = nil,
        fontFamily: String? = nil,
        fontSize: Double? = nil,
        lineHeight: Double? = nil,
        fontWeight: Double? = nil,
        fontStyle: FontStyle? = nil,
        textAlign: TextAlign? = nil,
        centerX: Double? = nil,
        centerY: Double? = nil,
        width: Double? = nil,
        height: Double? = nil,
        layout: Layout? = nil,
        textTransform: TextTransform? = nil
    ) {
        self.isEnabled = isEnabled
        self.color = color
        self.fontFamily = fontFamily
        self.fontSize = fontSize
        self.lineHeight = lineHeight
        self.fontWeight = fontWeight
        self.fontStyle = fontStyle
        self.textAlign = textAlign
        self.centerX = centerX
        self.centerY = centerY
        self.width = width
        self.height = height
        self.layout = layout
        self.textTransform = textTransform
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case isEnabled
        case color
        case fontFamily
        case fontSize
        case lineHeight
        case fontWeight
        case fontStyle
        case textAlign
        case centerX
        case centerY
        case width
        case height
        case layout
        case textTransform
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(isEnabled, forKey: .isEnabled)
        try container.encodeIfPresent(color, forKey: .color)
        try container.encodeIfPresent(fontFamily, forKey: .fontFamily)
        try container.encodeIfPresent(fontSize, forKey: .fontSize)
        try container.encodeIfPresent(lineHeight, forKey: .lineHeight)
        try container.encodeIfPresent(fontWeight, forKey: .fontWeight)
        try container.encodeIfPresent(fontStyle, forKey: .fontStyle)
        try container.encodeIfPresent(textAlign, forKey: .textAlign)
        try container.encodeIfPresent(centerX, forKey: .centerX)
        try container.encodeIfPresent(centerY, forKey: .centerY)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(layout, forKey: .layout)
        try container.encodeIfPresent(textTransform, forKey: .textTransform)
    }
}
