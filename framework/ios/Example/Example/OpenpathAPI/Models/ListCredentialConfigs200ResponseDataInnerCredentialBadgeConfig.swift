//
// ListCredentialConfigs200ResponseDataInnerCredentialBadgeConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ListCredentialConfigs200ResponseDataInnerCredentialBadgeConfig: Codable, JSONEncodable, Hashable {
    public var id: Double?
    public var nameConfig: GlobalListBadgeDefaultConfigs200ResponseDataInnerNameConfig?
    public var customField1Config: GlobalListBadgeDefaultConfigs200ResponseDataInnerCustomField1Config?
    public var customField2Config: GlobalListBadgeDefaultConfigs200ResponseDataInnerCustomField1Config?
    public var backgroundConfig: GlobalListBadgeDefaultConfigs200ResponseDataInnerBackgroundConfig?
    public var photoConfig: GlobalListBadgeDefaultConfigs200ResponseDataInnerPhotoConfig?
    public var logoConfig: GlobalListBadgeDefaultConfigs200ResponseDataInnerLogoConfig?
    public var externalIdConfig: GlobalListBadgeDefaultConfigs200ResponseDataInnerCustomField1Config?
    public var customField1: ListCredentialConfigs200ResponseDataInnerOrg?
    public var customField2: ListCredentialConfigs200ResponseDataInnerOrg?
    public var badgeDefaultConfig: GlobalListBadgeDefaultConfigs200ResponseDataInner?
    public var backgroundPicture: GlobalListBadgeDefaultConfigs200ResponseDataInnerBackgroundPicture?
    public var logoPicture: GlobalListBadgeDefaultConfigs200ResponseDataInnerBackgroundPicture?
    public var name: String?
    public var badgeBorderRadius: Int?
    public var isOrgDefault: Bool?

    public init(
        id: Double? = nil,
        nameConfig: GlobalListBadgeDefaultConfigs200ResponseDataInnerNameConfig? = nil,
        customField1Config: GlobalListBadgeDefaultConfigs200ResponseDataInnerCustomField1Config? = nil,
        customField2Config: GlobalListBadgeDefaultConfigs200ResponseDataInnerCustomField1Config? = nil,
        backgroundConfig: GlobalListBadgeDefaultConfigs200ResponseDataInnerBackgroundConfig? = nil,
        photoConfig: GlobalListBadgeDefaultConfigs200ResponseDataInnerPhotoConfig? = nil,
        logoConfig: GlobalListBadgeDefaultConfigs200ResponseDataInnerLogoConfig? = nil,
        externalIdConfig: GlobalListBadgeDefaultConfigs200ResponseDataInnerCustomField1Config? = nil,
        customField1: ListCredentialConfigs200ResponseDataInnerOrg? = nil,
        customField2: ListCredentialConfigs200ResponseDataInnerOrg? = nil,
        badgeDefaultConfig: GlobalListBadgeDefaultConfigs200ResponseDataInner? = nil,
        backgroundPicture: GlobalListBadgeDefaultConfigs200ResponseDataInnerBackgroundPicture? = nil,
        logoPicture: GlobalListBadgeDefaultConfigs200ResponseDataInnerBackgroundPicture? = nil,
        name: String? = nil,
        badgeBorderRadius: Int? = nil,
        isOrgDefault: Bool? = nil
    ) {
        self.id = id
        self.nameConfig = nameConfig
        self.customField1Config = customField1Config
        self.customField2Config = customField2Config
        self.backgroundConfig = backgroundConfig
        self.photoConfig = photoConfig
        self.logoConfig = logoConfig
        self.externalIdConfig = externalIdConfig
        self.customField1 = customField1
        self.customField2 = customField2
        self.badgeDefaultConfig = badgeDefaultConfig
        self.backgroundPicture = backgroundPicture
        self.logoPicture = logoPicture
        self.name = name
        self.badgeBorderRadius = badgeBorderRadius
        self.isOrgDefault = isOrgDefault
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case nameConfig
        case customField1Config
        case customField2Config
        case backgroundConfig
        case photoConfig
        case logoConfig
        case externalIdConfig
        case customField1
        case customField2
        case badgeDefaultConfig
        case backgroundPicture
        case logoPicture
        case name
        case badgeBorderRadius
        case isOrgDefault
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(nameConfig, forKey: .nameConfig)
        try container.encodeIfPresent(customField1Config, forKey: .customField1Config)
        try container.encodeIfPresent(customField2Config, forKey: .customField2Config)
        try container.encodeIfPresent(backgroundConfig, forKey: .backgroundConfig)
        try container.encodeIfPresent(photoConfig, forKey: .photoConfig)
        try container.encodeIfPresent(logoConfig, forKey: .logoConfig)
        try container.encodeIfPresent(externalIdConfig, forKey: .externalIdConfig)
        try container.encodeIfPresent(customField1, forKey: .customField1)
        try container.encodeIfPresent(customField2, forKey: .customField2)
        try container.encodeIfPresent(badgeDefaultConfig, forKey: .badgeDefaultConfig)
        try container.encodeIfPresent(backgroundPicture, forKey: .backgroundPicture)
        try container.encodeIfPresent(logoPicture, forKey: .logoPicture)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(badgeBorderRadius, forKey: .badgeBorderRadius)
        try container.encodeIfPresent(isOrgDefault, forKey: .isOrgDefault)
    }
}
