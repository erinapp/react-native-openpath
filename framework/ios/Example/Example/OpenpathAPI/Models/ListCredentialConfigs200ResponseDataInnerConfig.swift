//
// ListCredentialConfigs200ResponseDataInnerConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ListCredentialConfigs200ResponseDataInnerConfig: Codable, JSONEncodable, Hashable {
    public var logLevel: String?
    public var isDeveloperToolsEnabled: Bool?
    public var isReaderDetailEnabled: Bool?
    public var isBadgeViewEnabled: Bool?
    public var isRatingPromptEnabled: Bool?
    public var isCrEnabled: Bool?
    public var crRadiusMeters: Int?
    public var mrTimeoutSeconds: Int?

    public init(
        logLevel: String? = nil,
        isDeveloperToolsEnabled: Bool? = nil,
        isReaderDetailEnabled: Bool? = nil,
        isBadgeViewEnabled: Bool? = nil,
        isRatingPromptEnabled: Bool? = nil,
        isCrEnabled: Bool? = nil,
        crRadiusMeters: Int? = nil,
        mrTimeoutSeconds: Int? = nil
    ) {
        self.logLevel = logLevel
        self.isDeveloperToolsEnabled = isDeveloperToolsEnabled
        self.isReaderDetailEnabled = isReaderDetailEnabled
        self.isBadgeViewEnabled = isBadgeViewEnabled
        self.isRatingPromptEnabled = isRatingPromptEnabled
        self.isCrEnabled = isCrEnabled
        self.crRadiusMeters = crRadiusMeters
        self.mrTimeoutSeconds = mrTimeoutSeconds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case logLevel
        case isDeveloperToolsEnabled
        case isReaderDetailEnabled
        case isBadgeViewEnabled
        case isRatingPromptEnabled
        case isCrEnabled
        case crRadiusMeters
        case mrTimeoutSeconds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(logLevel, forKey: .logLevel)
        try container.encodeIfPresent(isDeveloperToolsEnabled, forKey: .isDeveloperToolsEnabled)
        try container.encodeIfPresent(isReaderDetailEnabled, forKey: .isReaderDetailEnabled)
        try container.encodeIfPresent(isBadgeViewEnabled, forKey: .isBadgeViewEnabled)
        try container.encodeIfPresent(isRatingPromptEnabled, forKey: .isRatingPromptEnabled)
        try container.encodeIfPresent(isCrEnabled, forKey: .isCrEnabled)
        try container.encodeIfPresent(crRadiusMeters, forKey: .crRadiusMeters)
        try container.encodeIfPresent(mrTimeoutSeconds, forKey: .mrTimeoutSeconds)
    }
}
