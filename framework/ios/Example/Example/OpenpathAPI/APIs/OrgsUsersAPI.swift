//
// OrgsUsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OrgsUsersAPI {
    /**
     Generate new setup mobile token for credential

     - parameter orgId: (path)
     - parameter userId: (path)
     - parameter credentialId: (path)
     - returns: GenerateSetupMobileTokenFromDeviceIdentifier201Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func generateSetupMobileToken(
        orgId: Int,
        userId: Int,
        credentialId: Int
    ) async throws -> GenerateSetupMobileTokenFromDeviceIdentifier201Response {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                    continuation.resume(throwing: CancellationError())
                    return
                }

                requestTask = generateSetupMobileTokenWithRequestBuilder(
                    orgId: orgId,
                    userId: userId,
                    credentialId: credentialId
                ).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Generate new setup mobile token for credential
     - POST /orgs/{orgId}/users/{userId}/credentials/{credentialId}/generateSetupMobileToken
     - __JWT is required for this endpoint with at least one of the following scopes__: o{params.orgId}-user{params.userId}:w,o{params.orgId}-user{params.userId}:orgUser-generateSetupMobileToken:w,o{params.orgId}-user:w,o:w,s-o:w<br/><br/>__Endpoint name__: generateSetupMobileToken
     - API Key:
       - type: apiKey Authorization
       - name: jwt
     - parameter orgId: (path)
     - parameter userId: (path)
     - parameter credentialId: (path)
     - returns: RequestBuilder<GenerateSetupMobileTokenFromDeviceIdentifier201Response>
     */
    open class func generateSetupMobileTokenWithRequestBuilder(
        orgId: Int,
        userId: Int,
        credentialId: Int
    ) -> RequestBuilder<GenerateSetupMobileTokenFromDeviceIdentifier201Response> {
        var localVariablePath = "/orgs/{orgId}/users/{userId}/credentials/{credentialId}/generateSetupMobileToken"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{orgId}",
            with: orgIdPostEscape,
            options: .literal,
            range: nil
        )
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{userId}",
            with: userIdPostEscape,
            options: .literal,
            range: nil
        )
        let credentialIdPreEscape = "\(APIHelper.mapValueToPathItem(credentialId))"
        let credentialIdPostEscape = credentialIdPreEscape
            .addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{credentialId}",
            with: credentialIdPostEscape,
            options: .literal,
            range: nil
        )
        let localVariableURLString = OpenpathAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateSetupMobileTokenFromDeviceIdentifier201Response>
            .Type = OpenpathAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "POST",
            URLString: localVariableUrlComponents?.string ?? localVariableURLString,
            parameters: localVariableParameters,
            headers: localVariableHeaderParameters
        )
    }

    /**
     List all user credentials

     - parameter orgId: (path)
     - parameter userId: (path)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter sort: (query)  (optional, default to "id")
     - parameter order: (query)  (optional, default to "asc")
     - parameter q: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter preFilter: (query)  (optional)
     - returns: ListOrgCredentials200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listCredentials(
        orgId: Int,
        userId: Int,
        limit: Int? = nil,
        offset: Int? = nil,
        sort: String? = nil,
        order: String? = nil,
        q: String? = nil,
        filter: String? = nil,
        preFilter: String? = nil
    ) async throws -> ListOrgCredentials200Response {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                    continuation.resume(throwing: CancellationError())
                    return
                }

                requestTask = listCredentialsWithRequestBuilder(
                    orgId: orgId,
                    userId: userId,
                    limit: limit,
                    offset: offset,
                    sort: sort,
                    order: order,
                    q: q,
                    filter: filter,
                    preFilter: preFilter
                ).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     List all user credentials
     - GET /orgs/{orgId}/users/{userId}/credentials
     - __JWT is required for this endpoint with at least one of the following scopes__: o{params.orgId}-user:w,o{params.orgId}-user:r,o{params.orgId}-dash:w,o{params.orgId}-dash:r,o{params.orgId}-dashEntry:w,o{params.orgId}-dashEntry:r,o{params.orgId}-dashActivity:w,o{params.orgId}-dashActivity:r,o{params.orgId}-user{params.userId}:r,o{params.orgId}-ldp:w,o{params.orgId}-ldp:r,o{params.orgId}-site:w,o{params.orgId}-site:r,o{params.orgId}-siteGeneral:w,o{params.orgId}-siteGeneral:r,o{params.orgId}-entryState:w,o{params.orgId}-entryState:r,o{params.orgId}-hw:w,o{params.orgId}-hw:r,o{params.orgId}-rptGeneral:w,o{params.orgId}-rptGeneral:r,o{params.orgId}-rpt:w,o{params.orgId}-rpt:r,o{params.orgId}-entryAccessAudit:w,o{params.orgId}-entryAccessAudit:r,o{params.orgId}-portalAudit:w,o{params.orgId}-portalAudit:r,o{params.orgId}-integrations:w,o{params.orgId}-integrations:r,o{params.orgId}-admin:w,o{params.orgId}-admin:r,o{params.orgId}-outboundWebhooks:w,o{params.orgId}-outboundWebhooks:r,o{params.orgId}-configurations:w,o{params.orgId}-configurations:r,o{params.orgId}-account:w,o{params.orgId}-account:r,o{params.orgId}-mobileAppSettings:w,o{params.orgId}-mobileAppSettings:r,o{params.orgId}-alertSettings:w,o{params.orgId}-alertSettings:r,o{params.orgId}-quickStart:w,o{params.orgId}-quickStart:r,o{params.orgId}-credentials:w,o{params.orgId}-credentials:r,o{params.orgId}-role:w,o{params.orgId}-role:r,o:w,o:r,s-o:w,s-o:r,o{params.orgId}-user{params.userId}:orgUser-listCredentials:r<br/><br/>__Endpoint name__: listCredentials
     - API Key:
       - type: apiKey Authorization
       - name: jwt
     - parameter orgId: (path)
     - parameter userId: (path)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter sort: (query)  (optional, default to "id")
     - parameter order: (query)  (optional, default to "asc")
     - parameter q: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter preFilter: (query)  (optional)
     - returns: RequestBuilder<ListOrgCredentials200Response>
     */
    open class func listCredentialsWithRequestBuilder(
        orgId: Int,
        userId: Int,
        limit: Int? = nil,
        offset: Int? = nil,
        sort: String? = nil,
        order: String? = nil,
        q: String? = nil,
        filter: String? = nil,
        preFilter: String? = nil
    ) -> RequestBuilder<ListOrgCredentials200Response> {
        var localVariablePath = "/orgs/{orgId}/users/{userId}/credentials"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{orgId}",
            with: orgIdPostEscape,
            options: .literal,
            range: nil
        )
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{userId}",
            with: userIdPostEscape,
            options: .literal,
            range: nil
        )
        let localVariableURLString = OpenpathAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "order": order?.encodeToJSON(),
            "q": q?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "preFilter": preFilter?.encodeToJSON()
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListOrgCredentials200Response>.Type = OpenpathAPI
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: localVariableUrlComponents?.string ?? localVariableURLString,
            parameters: localVariableParameters,
            headers: localVariableHeaderParameters
        )
    }

    /**
     Send email to user to set up their mobile credential

     - parameter orgId: (path)
     - parameter userId: (path)
     - parameter credentialId: (path)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func setupMobileCredential(orgId: Int, userId: Int, credentialId: Int) async throws {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                    continuation.resume(throwing: CancellationError())
                    return
                }

                requestTask = setupMobileCredentialWithRequestBuilder(
                    orgId: orgId,
                    userId: userId,
                    credentialId: credentialId
                ).execute { result in
                    switch result {
                    case .success:
                        continuation.resume(returning: ())
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Send email to user to set up their mobile credential
     - POST /orgs/{orgId}/users/{userId}/credentials/{credentialId}/setupMobile
     - __JWT is required for this endpoint with at least one of the following scopes__: o{params.orgId}-user:w,o-support:w,o:w,s-o:w<br/><br/>__Endpoint name__: setupMobileCredential
     - API Key:
       - type: apiKey Authorization
       - name: jwt
     - parameter orgId: (path)
     - parameter userId: (path)
     - parameter credentialId: (path)
     - returns: RequestBuilder<Void>
     */
    open class func setupMobileCredentialWithRequestBuilder(orgId: Int, userId: Int,
                                                            credentialId: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/orgs/{orgId}/users/{userId}/credentials/{credentialId}/setupMobile"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{orgId}",
            with: orgIdPostEscape,
            options: .literal,
            range: nil
        )
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{userId}",
            with: userIdPostEscape,
            options: .literal,
            range: nil
        )
        let credentialIdPreEscape = "\(APIHelper.mapValueToPathItem(credentialId))"
        let credentialIdPostEscape = credentialIdPreEscape
            .addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{credentialId}",
            with: credentialIdPostEscape,
            options: .literal,
            range: nil
        )
        let localVariableURLString = OpenpathAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenpathAPI.requestBuilderFactory
            .getNonDecodableBuilder()

        return localVariableRequestBuilder.init(
            method: "POST",
            URLString: localVariableUrlComponents?.string ?? localVariableURLString,
            parameters: localVariableParameters,
            headers: localVariableHeaderParameters
        )
    }
}
